#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage{listings}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command makeindex
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=lines,breaklines=true,columns=fullflexible"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The guide to ChronOS
\end_layout

\begin_layout Author
Betty Liu u2061245
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction to ChronOS
\end_layout

\begin_layout Standard
All code available here 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/acyanbird/chronos_labs/
\end_layout

\end_inset

 Please see different branch for each stage.
\end_layout

\begin_layout Standard
Writing a lab assignment to create an operating system using Rust as the
 programming language:
\end_layout

\begin_layout Standard

\series bold
Lab Assignment: 
\series default
Building an Operating System with Rust
\end_layout

\begin_layout Standard

\series bold
Objective:
\series default
 In this lab, you will learn to create a simple operating system using the
 Rust programming language.
 Operating systems are complex pieces of software that manage hardware resources
 and provide services to other software applications.
 This lab will introduce you to the basics of operating system development,
 focusing on the foundational components.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Chapter
Lab 0 - Introduction to Rust Programming languoage
\end_layout

\begin_layout Section
Objectives
\end_layout

\begin_layout Standard
Since this project uses Rust as the programming language, and there are
 no specific university courses for it, this lab will introduce you to some
 fundamental syntax to help you get started.
 However, to master this language, you'll need to continue learning as you
 go.
 Towards the end, we'll share extra resources for self-study.
\end_layout

\begin_layout Section
Install Rust
\end_layout

\begin_layout Standard
Rustup is used to install and managed Rust.
 You can check if your machine is already install Rust by typing rustc --version
 in your console.
 
\end_layout

\begin_layout Standard
If not, for installation on Unix-like machine (e.g.
 MacOS, Linux) input this in terminal
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For windows users install
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/
\end_layout

\begin_layout Plain Layout

rustup-init.exe
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integrated Development Environment
\end_layout

\begin_layout Standard
I highly recommend using an IDE for development.
 Currently, there are not many IDEs that support Rust.
 Here, I recommend Visual Studio Code + rust-analyzer entension or RustRover.
 
\end_layout

\begin_layout Section
Hello World
\end_layout

\begin_layout Standard
We will use cargo to create the basic framework for the project.
 Cargo is Rustâ€™s build system and package manager and it should be installed
 by rustup.
 You could check it by
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cargo --version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create project by
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cargo new hello
\end_layout

\begin_layout Plain Layout

cd hello
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It will also generate an empty git repository for version control, and a
 cargo.toml that procvie project basic information and dependency.
 We could ignore it right now.
 The file structure is like:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-11 23-19-08.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
project structure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Cargo.toml: This is the configuration file for your Rust project.
 It contains metadata about the project, such as its name, version, dependencies
, and other settings.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
src/directory: This directory is where you put your source code files.
 It contains your project's main code.
 You will often have one or more Rust source files (.rs) in this directory.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
main.rs: This is the primary entry point for your Rust application.
 It typically contains the main function, which is the starting point of
 your program.
 
\end_layout

\begin_layout Standard
The main.rs created by cargo is a simple program that would print Hello,
 world! It is similar to C.
 To run project use 
\series bold
cargo run 
\series default
command in terminal.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fn main() {
\end_layout

\begin_layout Plain Layout

    println!("Hello, world!");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Variables 
\begin_inset CommandInset label
LatexCommand label
name "sec:Variables"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Variables:
\end_layout

\begin_layout Itemize
Variables in Rust are declared using the let keyword.
\end_layout

\begin_layout Itemize
By default, variables in Rust are immutable, which means their values cannot
 be changed once assigned.
 To make a variable mutable, you use the mut keyword.
\end_layout

\begin_layout Itemize
You can reassign values to mutable variables, but their types must remain
 the same.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Declare an immutable integer variable
\end_layout

\begin_layout Plain Layout

let x = 10;
\end_layout

\begin_layout Plain Layout

// Declare a mutable integer variable
\end_layout

\begin_layout Plain Layout

let mut y = 20;
\end_layout

\begin_layout Plain Layout

// Reassign a value to the mutable variable
\end_layout

\begin_layout Plain Layout

y = 30;
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Constants:
\end_layout

\begin_layout Itemize
Constants in Rust are declared using the const keyword.
\end_layout

\begin_layout Itemize
Constants must have an explicitly defined type and must have a fixed, compile-ti
me determined value.
\end_layout

\begin_layout Itemize
Conventionally, constants are named using all uppercase letters and underscores
 to separate words.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Declare an integer constant
\end_layout

\begin_layout Plain Layout

const MAX_VALUE: i32 = 100;
\end_layout

\begin_layout Plain Layout

// Declare a string constant
\end_layout

\begin_layout Plain Layout

const GREETING: &str = "Hello, Rust!";
\end_layout

\end_inset


\end_layout

\begin_layout Section
Attributes
\begin_inset CommandInset label
LatexCommand label
name "sec:Attributes"

\end_inset


\end_layout

\begin_layout Standard
Attributes in Rust are metadata applied to modules, crates, functions, structs,
 or other items.
 They can instruct the compiler to perform specific tasks or apply certain
 properties to the item they annotate.
 Attributes can be divided into two main categories: Inner Attributes and
 Outer Attributes.
\end_layout

\begin_layout Itemize
Outer Attributes (#[outer_attribute]): Applied to the item that follows
 them.
 They are used to set attributes or give instructions related to the item
 directly below them.
\end_layout

\begin_layout Itemize
Inner Attributes (#![inner_attribute]): Applied to the item they are contained
 within.
 They are often found at the beginning of source files or modules to configure
 or set options for the scope they reside in.
\end_layout

\begin_layout Section
Unsafe Rust
\begin_inset CommandInset label
LatexCommand label
name "sec:Unsafe-Rust"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Tell the compiler I know what I'm doing!
\end_layout

\begin_layout Standard
The unsafe keyword allows you to bypass the language's usual safety checks
 and guarantees.
 It's used when you need to perform operations that the Rust compiler can't
 prove to be safe at compile-time, such as accessing raw pointers, dereferencing
 them, or making changes to mutable static variables.
 It's a way to tell the Rust compiler that you, the programmer, will ensure
 the safety of the code within the unsafe block.
\end_layout

\begin_layout Subsection
External Code
\begin_inset CommandInset label
LatexCommand label
name "subsec:External-Code"

\end_inset


\end_layout

\begin_layout Chapter
Lab 1 - Getting started
\end_layout

\begin_layout Standard
These lab is running and tested on Linux (Debian) only for now.
 
\end_layout

\begin_layout Section
Expected Outcome
\end_layout

\begin_layout Standard
In this lab, we'll create a Rust program entirely from scratch, free from
 any reliance on a host operating system.
 Our goal is to develop a minimal 64-bit kernel that can display text using
 VGA through QEMU.
 Below is the expected output.
\end_layout

\begin_layout Section
Preparation
\end_layout

\begin_layout Itemize
QEMU
\end_layout

\begin_layout Standard
To run the experiment's output, we need to use QEMU.
 Here, we won't list the installation steps for QEMU on various operating
 systems.
 Please visit the official website at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.qemu.org/download/
\end_layout

\end_inset

 to download the appropriate installer and follow the on-screen instructions
 for installation.
\end_layout

\begin_layout Itemize
Nightly Rust
\end_layout

\begin_layout Standard
Rust offers various versions, but for operating system development, we require
 certain experimental features not available in the stable version.
 Thus, we can't use the stable version.
 To install Nightly Rust, simply enter the following command in your terminal.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rustup update nightly 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
bootimage
\end_layout

\begin_layout Standard
This tool assists us in generating files for the virtual machine (QEMU).
 To install it, use the following command in your terminal using Cargo.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cargo install bootimage
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
llvm-tools-preview
\end_layout

\begin_layout Standard
The llvm-tools-preview is a dependency for the bootimage tool.
 You can install it using command 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rustup component add llvm-tools-preview
\end_layout

\end_inset


\end_layout

\begin_layout Section
Task 1 - Standalone Rust Binary
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
When we create a Rust program, similar to Lab 0, it usually relies on an
 existing operating system.
 Rust comes with a standard library that depends on the features of that
 operating system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-14 23-37-02.png
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Common Rust Program
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
But since our goal is to build an operating system from the ground up, we
 can't rely on the existing one.
 So, we disable the standard library using no_std, and this lets us work
 directly with hardware.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-15 00-04-29.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Standalone Rust
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
See branch lab-1-1 for the code.
\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Standard

\series bold
Step 1: Setup a New Rust Project
\end_layout

\begin_layout Standard
Open a terminal and create a new Rust project by running
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small},breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

cargo new chronos_lab --bin --edition 2018
\end_layout

\end_inset

This creates a new binary project named chronos_lab.
 You could use your own name.
 Change into the project directory with 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd <your project name>
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Step 2: Editing Cargo.toml
\end_layout

\begin_layout Standard
Open the Cargo.toml file in your project's root directory.
\end_layout

\begin_layout Standard
In the initial Cargo.toml file, the [package] section includes predefined
 name, version, and edition information.
 You can now leave them unchanged.
\end_layout

\begin_layout Standard
Add configurations for development and release profiles to change the panic
 strategy to abort, which disables stack unwinding during a panic.
 Add these lines at the end of the Cargo.toml file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[profile.dev] 
\end_layout

\begin_layout Plain Layout

panic = "abort"  # Configures the compiler to abort the program on panic
 during development builds.
\end_layout

\begin_layout Plain Layout

[profile.release] 
\end_layout

\begin_layout Plain Layout

panic = "abort"  # Configures the compiler to abort the program on panic
 during release builds.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is the detail explaination of this part:
\end_layout

\begin_layout Itemize
[profile.dev] and [profile.release]: These sections allow you to specify settings
 for development (cargo build) and release (cargo build --release) profiles,
 respectively.
 
\end_layout

\begin_layout Itemize
panic = "abort": By default, Rust tries to recover from errors (panics)
 by unwinding the program's stack, which can't be done without additional
 support.
 In this case, we want the program to just stop immediately when an error
 happens.
 Setting panic = "abort" makes the program do that.
 
\end_layout

\begin_layout Standard

\series bold
Step 3: Writing the Freestanding Rust Code
\end_layout

\begin_layout Standard
Open the src/main.rs file.
 Replace its contents with the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#![no_std]  // disable the Rust standard library
\end_layout

\begin_layout Plain Layout

#![no_main] // disable all Rust-level entry points
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#[no_mangle]    // don't mangle the name of this function
\end_layout

\begin_layout Plain Layout

pub extern "C" fn _start() {
\end_layout

\begin_layout Plain Layout

    loop {}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#[panic_handler]    // this function is called on panic
\end_layout

\begin_layout Plain Layout

fn panic(_info: &core::panic::PanicInfo) -> ! {
\end_layout

\begin_layout Plain Layout

    // the `!` type means "this function never returns"
\end_layout

\begin_layout Plain Layout

    // place holder for now, we'll write this function later
\end_layout

\begin_layout Plain Layout

    loop {}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is the detail explaination of this part:
\end_layout

\begin_layout Itemize
#![no_std]: This attribute disables the standard library.
 It is used for low-level programming, where direct control over the system
 is required.
 
\end_layout

\begin_layout Itemize
#![no_main]: Rust programs typically start execution from the main function.
 This attribute disables it, which is necessary for creating a freestanding
 binary.
 
\end_layout

\begin_layout Itemize
#[no_mangle]: This attribute prevents Rust from changing the name of the
 _start function, ensuring the linker can find it.
 
\end_layout

\begin_layout Itemize
pub extern "C" fn _start() -> !: Defines the entry point for our program.
 The function will use the C ABI for compatibility with C code 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:External-Code"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The ! return type indicates that this function will never return.
 
\end_layout

\begin_layout Itemize
#[panic_handler]: Specifies the function to call when a panic occurs.
 Panics can occur for various reasons, such as out-of-bounds array access.
\end_layout

\begin_layout Standard
For more information see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Attributes"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Step 5: Building the Project
\end_layout

\begin_layout Standard
By default, the linker includes the C runtime, which can lead to errors.
 To avoid this problem, we have two options.
 One way is to pass different parameters based on the operating system we're
 using.
 However, a more direct approach is to specify that we're compiling for
 an embedded system.
 This way, the linker won't attempt to link the C runtime environment, ensuring
 a successful build without linker errors.
\end_layout

\begin_layout Standard
First add the target architecture.
 Open your terminal run the command 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rustup target add thumbv6m-none-eabi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command uses rustup, the Rust toolchain installer, to add support for
 compiling Rust code for the thumbv6m-none-eabi target, which is a common
 architecture for ARM Cortex-M microcontrollers.
 You can also choose alternative targets as long as the underlying environment
 doesn't include an operating system.
\end_layout

\begin_layout Standard
Execute 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cargo build --target=thumbv6m-none-eabi
\end_layout

\end_inset

 to compile your project for the thumbv6m-none-eabi target.
 This tells Cargo, Rust's package manager and build system, to compile the
 project for the specified architecture rather than the default target platform
 that is your host machine.
 
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
At this point, the program won't produce any output.
 If all the steps proceed smoothly, it should compile successfully without
 reporting any errors.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cargo build --target=thumbv6m-none-eabi
\end_layout

\begin_layout Plain Layout

   Compiling chronos_labs v0.1.0 (/home/lucia/2023cse/project/chronos_labs)
\end_layout

\begin_layout Plain Layout

    Finished dev [unoptimized + debuginfo] target(s) in 0.04s
\end_layout

\end_inset


\end_layout

\begin_layout Section
Task 2 - Build Minimal Kernel 
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
We'll use Rust to create a small 64-bit kernel for the x86 architecture
 base on program we made for previous task.
 We will use the bootloader tool to create a bootable disk image, allowing
 us to launch it using QEMU.
 
\end_layout

\begin_layout Standard
See branch lab-1-2 for the code.
 
\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Standard

\series bold
Step 1: Create a custom target specification file
\end_layout

\begin_layout Standard
In the previous task, we referenced an embedded environment as our compilation
 target.
 However, to build our custom operating system, we need to write a custom
 target specification file.
 Create a chronos_labs.json file in the root directory, although you can
 choose any name for this file.
 Create this file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

touch chronos_labs.json
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is the content of the file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "llvm-target": "x86_64-unknown-none",
\end_layout

\begin_layout Plain Layout

  "data-layout": "e-m:e-i64:64-f80:128-n8:16:32:64-S128",
\end_layout

\begin_layout Plain Layout

  "arch": "x86_64",
\end_layout

\begin_layout Plain Layout

  "target-endian": "little",
\end_layout

\begin_layout Plain Layout

  "target-pointer-width": "64",
\end_layout

\begin_layout Plain Layout

  "target-c-int-width": "32",
\end_layout

\begin_layout Plain Layout

  "os": "none",
\end_layout

\begin_layout Plain Layout

  "executables": true,
\end_layout

\begin_layout Plain Layout

  "linker-flavor": "ld.lld",
\end_layout

\begin_layout Plain Layout

  "linker": "rust-lld",
\end_layout

\begin_layout Plain Layout

  "panic-strategy": "abort",
\end_layout

\begin_layout Plain Layout

  "disable-redzone": true,
\end_layout

\begin_layout Plain Layout

  "features": "-mmx,-sse,+soft-float"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You don't necessarily need to understand what each fields represents, but
 here are a few of the parameters that are more unique compared to other
 operating systems and might be worth understanding:
\end_layout

\begin_layout Itemize
"llvm-target": "x86_64-unknown-none": Specifies the target architecture
 for the compiler.
 Here, it's for 64-bit x86 architecture without a specific vendor or operating
 system.
\end_layout

\begin_layout Itemize
"arch": "x86_64": The architecture of the target system, indicating a 64-bit
 processor.
\end_layout

\begin_layout Itemize
"linker-flavor": "ld.lld" and "linker": "rust-lld": Specify which linker
 to use, here it's cross-platform LLD linker included with Rust.
\end_layout

\begin_layout Itemize
"panic-strategy": "abort": Determines how to handle panic situations.
 "abort" means the program will immediately stop, without trying to unwind
 the stack.
\end_layout

\begin_layout Itemize
"disable-redzone": true: Disables the red zone, or sometimes it could lead
 to stack corruption.o
\end_layout

\begin_layout Itemize
"features": "-mmx,-sse,+soft-float": Specifies CPU features to enable or
 disable.
 Here, MMX and SSE are disabled, while software-based floating-point calculation
s are enabled.
 Disable of mmx and sse features means we disable the Single Instruction
 Multiple Data (SIMD) instructions because it will cause interruption too
 frequently.
 And enable soft-float that simulates all floating-point operations using
 software functions that rely on regular integers will solve the error by
 disable SIMD.
\end_layout

\begin_layout Standard

\series bold
Step 2: Create .cargo/config.toml
\end_layout

\begin_layout Standard
In your project's root directory, create a folder named .cargo
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir .cargo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inside the .cargo folder, create a file named config.toml
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd .cargo && touch config.toml
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open config.toml and paste the following contents:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[unstable]
\end_layout

\begin_layout Plain Layout

build-std = ["core", "compiler_builtins"]
\end_layout

\begin_layout Plain Layout

build-std-features = ["compiler-builtins-mem"]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

[build]
\end_layout

\begin_layout Plain Layout

target = "chronos_labs.json"	#replace with your file name
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here are explanations for each lines:
\end_layout

\begin_layout Standard

\series bold
[unstable]
\end_layout

\begin_layout Standard
build-std = ["core", "compiler_builtins"]: Tells Cargo to compile essential
 Rust libraries core and compiler_builtins from scratch
\end_layout

\begin_layout Standard
build-std-features = ["compiler-builtins-mem"]: Activates memory functions
 in compiler_builtins
\end_layout

\begin_layout Standard

\series bold
[build] 
\end_layout

\begin_layout Standard
target = "chronos_labs.json": Points to a custom target file to specify how
 to compile for a particular setup.
\end_layout

\begin_layout Standard

\series bold
Step 3: Use bootimage
\end_layout

\begin_layout Standard
Add bootimage to dependency, open Cargo.toml and add under [dependencies]
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[dependencies]
\end_layout

\begin_layout Plain Layout

bootloader = "0.9.23"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also add these in .cargo/config.toml
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[target.'cfg(target_os = "none")']
\end_layout

\begin_layout Plain Layout

runner = "bootimage runner"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
[target.'cfg(target_os = "none")'] include "chronos_labs.json" file, and runner
 key defines command gets executed bootimage runner after the project has
 been successfully compiled.
\end_layout

\begin_layout Standard
Now we can use cargo run to execute this project.
 The cargo run command is a convenient tool used in Rust projects to compile
 and run the application code in one step.
 
\end_layout

\begin_layout Standard
If you interested in what did bootimage tool do, see
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:What-did-bootimage"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
The output should be a blank QEMU window:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-28 22-55-22.png
	width 60page%

\end_inset


\end_layout

\begin_layout Section
Task 3 - Show something!
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
We use VGA text buffer to make output for this operating system.
 It is because it's simple and straightforward to write to.
 VGA text mode provides a direct way to display text on the screen by writing
 characters and their attributes (like color) to a specific area of memory.
 More inforamtion about it 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:VGA-text-buffer"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
In the Windows operating system, encountering an error often results in
 the appearance of a blue screen.
 Therefore, we will also attempt to display a blue screen in our system.
\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Standard
Open src/main.rs
\end_layout

\begin_layout Standard

\series bold
Step 1: Define Constants
\end_layout

\begin_layout Standard
Add these constant
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const BUFFER_HEIGHT: usize = 25;
\end_layout

\begin_layout Plain Layout

const BUFFER_WIDTH: usize = 80;
\end_layout

\begin_layout Plain Layout

const BACKGROUND_COLOR: u16 = 0x1000; // blue background, black foreground
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
const BUFFER_HEIGHT: usize = 25; Defines a constant named BUFFER_HEIGHT
 with a type of usize (an unsigned size type, which means it's a number
 that can't be negative and its size varies based on the computer architecture).
 The value 25 represents the number of text lines that the VGA text buffer
 can display at one time.
 
\end_layout

\begin_layout Itemize
const BUFFER_WIDTH: usize = 80; Similar to the first line, this defines
 a constant named BUFFER_WIDTH, also of type usize.
 The value 80 represents the number of characters that can fit on a single
 line of the VGA text buffer.
 
\end_layout

\begin_layout Itemize
const BACKGROUND_COLOR: u16 = 0x1000; This line defines a constant named
 BACKGROUND_COLOR with a type of u16 (a 16-bit unsigned integer).
 The value 0x1000 is a hexadecimal number that specifies the color attributes
 for the text and background.
 It will be 000100000000 in binary.
 Recover from 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:VGA-text-buffer"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we know that it sets the background color to blue and the foreground (text)
 color to black.
 
\end_layout

\begin_layout Standard
See more about variables in Rust on 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Variables"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Step 2: Initializes Buffer
\end_layout

\begin_layout Standard
Add this line inside _start()
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 let vga_buffer = unsafe { core::slice::from_raw_parts_mut(0xb8000 as *mut
 u16, 2000) }; 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
unsafe { ...
 }: In Rust, unsafe blocks are used for performing unsafe operations, such
 as direct hardware access or low-level memory operations.
 Here, the unsafe block is used for operations related to hardware interaction.
\end_layout

\begin_layout Itemize
core::slice::from_raw_parts_mut(0xb8000 as *mut u16, 2000): This is a function
 call that creates a mutable slice
\end_layout

\begin_layout Standard
- 0xb8000 as *mut u16: This is a memory address conversion, casting the
 hexadecimal address 0xb8000 as a mutable pointer to a u16 type.
 0xb8000 is starting address of VGA buffer, and each element is a 16-bit
 character/color combination.
\begin_inset Newline newline
\end_inset

- 2000: This is the length of the slice, indicating that the slice contains
 2000 u16 elements.
 That's the size of VGA buffer by 80*25 = 2000
\end_layout

\begin_layout Standard

\series bold
Step 3: Assign values
\end_layout

\begin_layout Standard
Add a for loop below
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for i in 0..(BUFFER_HEIGHT * BUFFER_WIDTH) {
\end_layout

\begin_layout Plain Layout

        vga_buffer[i] = BACKGROUND_COLOR;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sets each element of the vga_buffer array to BACKGROUND_COLOR.
 In this case, leave character section empty.
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-29 13-53-17.png
	width 60page%

\end_inset


\end_layout

\begin_layout Standard
You may try to display other color than blue by yourself? You could find
 the color code from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://wiki.osdev.org/Printing_To_Screen
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Lab 2 - VGA output
\end_layout

\begin_layout Section
Expected Outcome
\end_layout

\begin_layout Standard
In this lab, we'll implement 
\series bold
print!
\series default
 and
\series bold
 println! 
\series default
in our operating system, facilitating future feature implementation and
 output.
 We establish an interface that ensures safety and simplicity by isolating
 all unsafe operations within a dedicated module.
\end_layout

\begin_layout Chapter
Extra knowledge
\end_layout

\begin_layout Section
What did bootimage tool do?
\begin_inset CommandInset label
LatexCommand label
name "sec:What-did-bootimage"

\end_inset


\end_layout

\begin_layout Section
VGA text buffer
\begin_inset CommandInset label
LatexCommand label
name "sec:VGA-text-buffer"

\end_inset


\end_layout

\begin_layout Standard
The VGA (Video Graphics Array) text buffer is a specific area of memory
 used to display text on the screen in a text-mode environment.
 It ist located at the memory address 0xB8000.
 It extends to 0xB8FA0, covering a space that allows for 25 lines of 80
 characters each, making up the standard 80x25 text mode.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{
\backslash
baselineskip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each character in the VGA text buffer is represented by two bytes:
\end_layout

\begin_layout Standard
The first byte represents the ASCII code of the character, determining which
 character to display.
 The second byte defines the color of the character, with the lower 4 bits
 specifying the foreground color and the upper 4 bits the background color.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{
\backslash
baselineskip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/lucia/Pictures/Screenshots/Screenshot from 2024-01-29 14-47-58.png
	width 60page%

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

VGA text mode (2024) Wikipedia.
 Available at: https://en.wikipedia.org/wiki/VGA_text_mode (Accessed: 29 January
 2024).
 
\end_layout

\end_body
\end_document
